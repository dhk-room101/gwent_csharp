<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MVVMSidekick_Sl</name>
    </assembly>
    <members>
        <member name="T:MVVMSidekick.Behaviors.BaeconBehavior">
            <summary>
            Bind a beacon to a Content Control, make it work as a stage.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Behaviors.BaeconBehavior.BaeconNameProperty">
            <summary>
            The baecon name property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Behaviors.BaeconBehavior.OnAttached">
            <summary>
            Called when [attached].
            </summary>
        </member>
        <member name="M:MVVMSidekick.Behaviors.BaeconBehavior.OnDetaching">
            <summary>
            Called when [detaching].
            </summary>
        </member>
        <member name="P:MVVMSidekick.Behaviors.BaeconBehavior.BaeconName">
            <summary>
            Gets or sets the name of the baecon.
            </summary>
            <value>
            The name of the baecon.
            </value>
        </member>
        <member name="F:MVVMSidekick.Behaviors.ItemsSelectionBindingBehavior.BindingTargetProperty">
            <summary>
            The binding target property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Behaviors.SendToEventRouterAction.Invoke(System.Object)">
            <summary>
            Invokes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="P:MVVMSidekick.Behaviors.SendToEventRouterAction.EventRoutingName">
            <summary>
            Gets or sets the name of the event routing.
            </summary>
            <value>
            The name of the event routing.
            </value>
        </member>
        <member name="P:MVVMSidekick.Behaviors.SendToEventRouterAction.EventObjectType">
            <summary>
            Gets or sets the type of the event object.
            </summary>
            <value>
            The type of the event object.
            </value>
        </member>
        <member name="P:MVVMSidekick.Behaviors.SendToEventRouterAction.EventObject">
            <summary>
            Gets or sets the event object.
            </summary>
            <value>
            The event object.
            </value>
        </member>
        <member name="T:MVVMSidekick.Collections.DependencyObservableCollection`1">
            <summary>
            Class DependencyObservableCollection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MVVMSidekick.Collections.DependencyObservableCollection`1._core">
            <summary>
            The _core
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Collections.DependencyObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="F:MVVMSidekick.Collections.DependencyObservableCollection`1.CountProperty">
            <summary>
            The count property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;T&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.IndexOf(`0)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MVVMSidekick.Collections.DependencyObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:MVVMSidekick.Collections.DependencyObservableCollection`1.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MVVMSidekick.Collections.DependencyObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:MVVMSidekick.Collections.DependencyObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when [collection changed].
            </summary>
        </member>
        <member name="E:MVVMSidekick.Collections.DependencyObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:MVVMSidekick.Collections.DependencyObservableCollection`1.Item(System.Int32)">
            <summary>Gets or sets the item at the specified index.</summary>
            <value>The item.</value>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="T:MVVMSidekick.Collections.CollectionExtensions">
            <summary>
            <para> The extension method for collections </para>
            <para>集合类型的扩展方法</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.CollectionExtensions.ToKeyedObservableCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            <para>Transform to a dictionary with INotifyCollectionChanged</para>
            <para>生成一个带有集合变化通知的字典</para>
            </summary>
            <typeparam name="K">The type of the t group.</typeparam>
            <typeparam name="V"><para>Value Type</para><para>值类型</para></typeparam>
            <param name="items"><para>Source Dictionary</para><para>来源字典</para><para></para></param>
            <returns>KeyedObservableCollection&lt;K, V&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Collections.KeyedObservableCollection`2">
            <summary>
            Class KeyedObservableCollection.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Collections.KeyedObservableCollection`2"/> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentException">items could not be null.</exception>
        </member>
        <member name="F:MVVMSidekick.Collections.KeyedObservableCollection`2._coreDictionary">
            <summary>
            The _core dictionary
            </summary>
        </member>
        <member name="F:MVVMSidekick.Collections.KeyedObservableCollection`2._coreVersion">
            <summary>
            The _core version
            </summary>
        </member>
        <member name="F:MVVMSidekick.Collections.KeyedObservableCollection`2._shadowVersion">
            <summary>
            The _shadow version
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.IncVer">
            <summary>
            Incs the ver.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.InsertItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.SetItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Sets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.RemoveFromDic(System.Int32)">
            <summary>
            Removes from dic.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MVVMSidekick.Collections.KeyedObservableCollection`2.RemoveItem(System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:MVVMSidekick.Collections.KeyedObservableCollection`2.DictionaryItems">
            <summary>Gets the dictionary items.</summary>
            <value>The dictionary items.</value>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandEventArgs">
            <summary>
            Command被运行触发的事件数据类型
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandEventArgs.Create(System.Object,System.Object,System.Object,System.Object,System.String,System.Type)">
            <summary>
            Creates the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="viewModel">The view model.</param>
            <param name="viewSender">The view sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="eventHandlerType">Type of the event handler.</param>
            <returns>EventCommandEventArgs.</returns>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.Parameter">
            <summary>
            Gets or sets the parameter.
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.ViewSender">
            <summary>
            Gets or sets the view sender.
            </summary>
            <value>The view sender.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.EventArgs">
            <summary>
            Gets or sets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandEventArgs.EventHandlerType">
            <summary>
            Gets or sets the type of the event handler.
            </summary>
            <value>The type of the event handler.</value>
        </member>
        <member name="T:MVVMSidekick.Commands.ICommandWithViewModel">
            <summary>
            带有VM的Command接口
            </summary>
        </member>
        <member name="P:MVVMSidekick.Commands.ICommandWithViewModel.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandBase">
            <summary>
            事件Command,运行后马上触发一个事件，事件中带有Command实例和VM实例属性
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.OnCommandExecute(MVVMSidekick.Commands.EventCommandEventArgs)">
            <summary>
            执行时的逻辑
            </summary>
            <param name="args">执行时的事件数据</param>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.CanExecute(System.Object)">
            <summary>
            该Command是否能执行
            </summary>
            <param name="parameter">判断参数</param>
            <returns>是否</returns>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.OnCanExecuteChanged">
            <summary>
            是否能执行变化时触发事件的逻辑
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandBase.Execute(System.Object)">
            <summary>
            执行Command
            </summary>
            <param name="parameter">参数条件</param>
        </member>
        <member name="P:MVVMSidekick.Commands.EventCommandBase.ViewModel">
            <summary>
            VM
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:MVVMSidekick.Commands.EventCommandBase.CommandExecute">
            <summary>
            运行时触发的事件
            </summary>
        </member>
        <member name="E:MVVMSidekick.Commands.EventCommandBase.CanExecuteChanged">
            <summary>
            是否能执行的值产生变化的事件
            </summary>
        </member>
        <member name="T:MVVMSidekick.Commands.EventBinding.CommandBinding">
            <summary>
            Class CommandBinding.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventBinding.CommandBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Commands.EventBinding.CommandBinding"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Commands.EventBinding.CommandBinding.EventSourceProperty">
            <summary>
            The event source property
            </summary>
        </member>
        <member name="F:MVVMSidekick.Commands.EventBinding.CommandBinding.oldEventDispose">
            <summary>
            The old event dispose
            </summary>
        </member>
        <member name="F:MVVMSidekick.Commands.EventBinding.CommandBinding.CommandProperty">
            <summary>
            The command property
            </summary>
        </member>
        <member name="F:MVVMSidekick.Commands.EventBinding.CommandBinding.ParameterProperty">
            <summary>
            The parameter property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventBinding.CommandBinding.ExecuteFromEvent(System.Object,System.Object,System.String,System.Type)">
            <summary>
            Executes from event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="eventHandlerType">Type of the event handler.</param>
        </member>
        <member name="P:MVVMSidekick.Commands.EventBinding.CommandBinding.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventBinding.CommandBinding.EventSource">
            <summary>
            Gets or sets the event source.
            </summary>
            <value>The event source.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventBinding.CommandBinding.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:MVVMSidekick.Commands.EventBinding.CommandBinding.Parameter">
            <summary>
            Gets or sets the parameter.
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="T:MVVMSidekick.Commands.EventCommandHelper">
            <summary>
            事件Command的助手类
            </summary>
        </member>
        <member name="M:MVVMSidekick.Commands.EventCommandHelper.WithViewModel``1(``0,MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            为一个事件Command制定一个VM
            </summary>
            <typeparam name="TCommand">事件Command具体类型</typeparam>
            <param name="cmd">事件Command实例</param>
            <param name="viewModel">VM实例</param>
            <returns>事件Command实例本身</returns>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter">
            <summary>
            全局事件根
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.EventRouting.EventRouter"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MVVMSidekick.EventRouting.EventRouter"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.RaiseEvent``1(System.Object,``0,System.String)">
            <summary>
            触发事件
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <param name="sender">事件发送者</param>
            <param name="eventArgs">事件数据</param>
            <param name="callerMemberNameOrEventName">发送事件名</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.RaiseEvent(System.Object,System.Object,System.Type,System.String)">
            <summary>
            触发事件
            </summary>
            <param name="sender">事件发送者</param>
            <param name="eventArgs">事件数据</param>
            <param name="eventArgsType">Type of the event arguments.</param>
            <param name="callerMemberNameOrEventName">发送事件名</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.GetEventObject``1">
            <summary>
            取得独立事件类
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <returns>事件独立类</returns>
        </member>
        <member name="F:MVVMSidekick.EventRouting.EventRouter.EventObjects">
            <summary>
            事件来源的代理对象实例
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.GetIEventObjectInstance(System.Type)">
            <summary>
            创建事件代理对象
            </summary>
            <param name="argsType">事件数据类型</param>
            <returns>代理对象实例</returns>
        </member>
        <member name="P:MVVMSidekick.EventRouting.EventRouter.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter.IEventObject">
            <summary>
            事件对象接口
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.IEventObject.RaiseEvent(System.Object,System.String,System.Object)">
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:MVVMSidekick.EventRouting.EventRouter.IEventObject.BaseArgsTypeInstance">
            <summary>
            Gets or sets the base arguments type instance.
            </summary>
            <value>The base arguments type instance.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouter.EventObject`1">
            <summary>
            事件对象
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
        </member>
        <member name="F:MVVMSidekick.EventRouting.EventRouter.EventObject`1._core">
            <summary>
            The _core
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.MVVMSidekick#EventRouting#EventRouter#IEventObject#RaiseEvent(System.Object,System.String,System.Object)">
            <summary>
            Raises the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.RaiseEvent(System.Object,System.String,`0)">
            <summary>
            发起事件
            </summary>
            <param name="sender">发送者</param>
            <param name="eventName">事件名</param>
            <param name="args">参数</param>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.Subscribe(System.IObserver{MVVMSidekick.EventRouting.RouterEventData{`0}})">
            <summary>
            Subscribes the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="F:MVVMSidekick.EventRouting.EventRouter.EventObject`1._Disposed">
            <summary>
            The _ disposed
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MVVMSidekick.EventRouting.EventRouter.EventObject`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouter.EventObject`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:MVVMSidekick.EventRouting.EventRouter.EventObject`1.BaseArgsTypeInstance">
            <summary>
            Gets or sets the base arguments type instance.
            </summary>
            <value>The base arguments type instance.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.NavigateCommandEventArgs">
            <summary>
            导航事件数据
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.NavigateCommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.EventRouting.NavigateCommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.NavigateCommandEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.EventRouting.NavigateCommandEventArgs"/> class.
            </summary>
            <param name="dic">The dic.</param>
        </member>
        <member name="P:MVVMSidekick.EventRouting.NavigateCommandEventArgs.ParameterDictionary">
            <summary>
            Gets or sets the parameter dictionary.
            </summary>
            <value>The parameter dictionary.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.NavigateCommandEventArgs.SourceViewType">
            <summary>
            Gets or sets the type of the source view.
            </summary>
            <value>The type of the source view.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.NavigateCommandEventArgs.TargetViewType">
            <summary>
            Gets or sets the type of the target view.
            </summary>
            <value>The type of the target view.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.NavigateCommandEventArgs.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.NavigateCommandEventArgs.TargetFrame">
            <summary>
            Gets or sets the target frame.
            </summary>
            <value>The target frame.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.SaveStateEventArgs">
            <summary>
            保存状态事件数据
            </summary>
        </member>
        <member name="P:MVVMSidekick.EventRouting.SaveStateEventArgs.ViewKeyId">
            <summary>
            Gets or sets the view key identifier.
            </summary>
            <value>The view key identifier.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.SaveStateEventArgs.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.EventRouterHelper">
            <summary>
            事件路由的扩展方法集合
            </summary>
        </member>
        <member name="M:MVVMSidekick.EventRouting.EventRouterHelper.RaiseEvent``1(MVVMSidekick.ViewModels.BindableBase,``0,System.String)">
            <summary>
            触发事件
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <param name="source">事件来源</param>
            <param name="eventArgs">事件数据</param>
            <param name="callerMemberName">事件名</param>
        </member>
        <member name="T:MVVMSidekick.EventRouting.RouterEventData`1">
            <summary>
            事件信息
            </summary>
            <typeparam name="TEventArgs">事件数据类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.EventRouting.RouterEventData`1.#ctor(System.Object,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.EventRouting.RouterEventData`1"/> struct.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <param name="eventArgs">The instance containing the event data.</param>
        </member>
        <member name="F:MVVMSidekick.EventRouting.RouterEventData`1._Sender">
            <summary>
            The _ sender
            </summary>
        </member>
        <member name="F:MVVMSidekick.EventRouting.RouterEventData`1._EventName">
            <summary>
            The _ event name
            </summary>
        </member>
        <member name="F:MVVMSidekick.EventRouting.RouterEventData`1._EventArgs">
            <summary>
            The _ event arguments
            </summary>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.Sender">
            <summary>
            事件发送者
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.EventName">
            <summary>
            事件名
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:MVVMSidekick.EventRouting.RouterEventData`1.EventArgs">
            <summary>
            事件数据
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="T:MVVMSidekick.EventRouting.DataEventArgs`1">
            <summary>
            Class DataEventArgs.
            </summary>
            <typeparam name="TData">The type of the t data.</typeparam>
        </member>
        <member name="M:MVVMSidekick.EventRouting.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.EventRouting.DataEventArgs`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:MVVMSidekick.EventRouting.DataEventArgs`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`1">
            <summary>
            Class ItemsAndSelectionGroup.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3">
            <summary>
            Class ItemsAndSelectionGroup.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TCollection">The type of the t collection.</typeparam>
            <typeparam name="TSelectionMode">The type of the t selection mode.</typeparam>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBase`1">
            <summary>
            <para>Model type with detail subtype type paremeter.</para>
            <para>具有子类详细类型定义的model </para>
            <example>
            public class Class1:BindableBase&lt;Class1&gt;  {}
            </example>
            </summary>
            <typeparam name="TSubClassType">Sub Type / 子类类型</typeparam>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBase">
            <summary>
            <para>Base type of bindable model.</para>
            <para>ViewModel 基类</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.DisposeGroupBase">
            <summary>
            Class DisposeGroupBase.
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IDisposeGroup">
            <summary>
            Interface IDisposeGroup
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IDisposeGroup.AddDisposable(System.IDisposable,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            增加一个一起Dispose的对象
            </summary>
            <param name="item">The item.</param>
            <param name="needCheckInFinalizer">if set to <c>true</c> [need check in finalizer].</param>
            <param name="comment">The comment.</param>
            <param name="member">The member.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IDisposeGroup.AddDisposeAction(System.Action,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            增加一个Dispose的时候需要做的操作
            </summary>
            <param name="action">The action.</param>
            <param name="needCheckInFinalizer">if set to <c>true</c> [need check in finalizer].</param>
            <param name="comment">The comment.</param>
            <param name="member">The member.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IDisposeGroup.DisposeInfoList">
            <summary>
            Gets the dispose information list.
            </summary>
            <value>The dispose information list.</value>
        </member>
        <member name="E:MVVMSidekick.ViewModels.IDisposeGroup.DisposingEntry">
            <summary>
            Occurs when [disposing entry].
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.IDisposeGroup.DisposedEntry">
            <summary>
            Occurs when [disposed entry].
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.DisposeGroupBase"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.CreateDisposeList">
            <summary>
            Creates the dispose list.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when [deserializing].
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.OnDeserializingActions">
            <summary>
            Called when [deserializing actions].
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MVVMSidekick.ViewModels.DisposeGroupBase"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.DisposeGroupBase._disposeInfoList">
            <summary>
            <para>Logic actions need to be executed when the instance is disposing</para>
            <para>销毁对象时 需要执行的操作</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.AddDisposeAction(System.Action,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Register logic actions need to be executed when the instance is disposing</para>
            <para>注册一个销毁对象时需要执行的操作</para>
            </summary>
            <param name="newAction">Disposing action/销毁操作</param>
            <param name="needCheckInFinalizer">if set to <c>true</c> [need check in finalizer].</param>
            <param name="comment">The comment.</param>
            <param name="caller">The caller.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.AddDisposable(System.IDisposable,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Register an object that need to be disposed when the instance is disposing</para>
            <para>销毁对象时 需要一起销毁的对象</para>
            </summary>
            <param name="item">disposable object/需要一起销毁的对象</param>
            <param name="needCheckInFinalizer">if set to <c>true</c> [need check in finalizer].</param>
            <param name="comment">The comment.</param>
            <param name="caller">The caller.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.Dispose(System.Boolean)">
            <summary>
            <para>Do all the dispose </para>
            <para>销毁，尝试运行所有注册的销毁操作</para>
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeGroupBase.OnDisposeExceptions(System.Collections.Generic.IList{MVVMSidekick.ViewModels.DisposeEntry})">
            <summary>
            <para>If dispose actions got exceptions, will handled here. </para>
            <para>处理Dispose 时产生的Exception</para>
            </summary>
            <param name="disposeInfoWithExceptions"><para>The exception and dispose infomation</para>
            <para>需要处理的异常信息</para></param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeGroupBase.DisposeInfoList">
            <summary>
            Gets the dispose information list.
            </summary>
            <value>The dispose information list.</value>
        </member>
        <member name="E:MVVMSidekick.ViewModels.DisposeGroupBase.DisposingEntry">
            <summary>
            Occurs when [disposing entry].
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.DisposeGroupBase.DisposedEntry">
            <summary>
            Occurs when [disposed entry].
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IBindable">
            <summary>
            Interface IBindable
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IBindable.GetFieldNames">
            <summary>
            Gets the field names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IBindable.EventRouter">
            <summary>
            Gets or sets the event router.
            </summary>
            <value>The event router.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IBindable.BindableInstanceId">
            <summary>
            Gets the bindable instance identifier.
            </summary>
            <value>The bindable instance identifier.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IBindable.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IBindable.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.RaiseErrorsChanged(System.String)">
            <summary>
            Raises the errors changed.
            </summary>
            <param name="propertName">Name of the propert.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase._IsValidationActivated">
            <summary>
            The _ is validation activated
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase._IsNotificationActivated">
            <summary>
            The _ is notification activated
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.GetFieldNames">
            <summary>
            <para>Get all property names that were defined in subtype, or added objectly in runtime</para>
            <para>取得本VM实例已经定义的所有字段名。其中包括静态声明的和动态添加的。</para>
            </summary>
            <returns>String[]  Property names/字段名数组</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.RaisePropertyChanged(System.Func{System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Raises the property changed.
            </summary>
            <param name="lazyEAFactory">The lazy ea factory.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.CheckError(System.Func{System.Boolean},System.String)">
            <summary>
            Checks the error.
            </summary>
            <param name="test">The test.</param>
            <param name="errorMessage">The error message.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.SetError(System.String)">
            <summary>
            <para>Sets the validate error of this model </para>
            <para>设置错误内容</para>
            </summary>
            <param name="value">The value.</param>
            <returns>Error string/错误内容字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.SetErrorAndTryNotify(System.String)">
            <summary>
            <para>Sets the validate error of this model and notify </para>
            <para>设置错误内容并且尝试用事件通知</para>
            </summary>
            <param name="value">The value.</param>
            <returns>Error string/错误内容字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase.GetColumnError(System.String)">
            <summary>
            <para>Gets validate error string of this field</para>
            <para>取得对于每个字段，验证失败所产生的错误信息</para>
            </summary>
            <param name="propertyName">Property Name of error /要检查错误的属性名</param>
            <returns>Rrror string /错误字符串</returns>
        </member>
        <member name="E:MVVMSidekick.ViewModels.BindableBase._ErrorsChanged">
            <summary>
            Occurs when [_ errors changed].
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.BindableInstanceId">
            <summary>
            Gets the bindable instance identifier.
            </summary>
            <value>The bindable instance identifier.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.IsValidationActivated">
            <summary>
            <para>Gets ot sets if the validation is activatied. This is a flag only， internal logic is not depend on this.</para>
            <para>读取/设置 此模型是否激活验证。这只是一个标记，内部逻辑并没有参考这个值</para>
            </summary>
            <value><c>true</c> if this instance is validation activated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.IsNotificationActivated">
            <summary>
            <para>Gets ot sets if the property change notification is activatied. </para>
            <para>读取/设置 此模型是否激活变化通知</para>
            </summary>
            <value><c>true</c> if this instance is notification activated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.IsInDesignMode">
            <summary>
            Gets a value indicating whether this instance is in design mode.
            </summary>
            <value><c>true</c> if this instance is in design mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="E:MVVMSidekick.ViewModels.BindableBase.PropertyChanged">
            <summary>
            <para>Event that raised when properties were changed and Notification was activited</para>
            <para> VM属性任何绑定用值被修改后,在启用通知情况下触发此事件</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.Error">
            <summary>
            <para>Gets the validate error of this model </para>
            <para>取得错误内容</para>
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase.EventRouter">
            <summary>
            Gets or sets the event router.
            </summary>
            <value>The event router.</value>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.BindableBase`1"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._BindableInstanceId">
            <summary>
            The _ bindable instance identifier
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1.InstanceCount">
            <summary>
            The instance count
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.ResetPropertyValue``1(MVVMSidekick.ViewModels.Property{``0})">
            <summary>
            清除值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">The property.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.CastToCurrentType(MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            <para>Cast a model instance to current model subtype</para>
            <para>将一个 model 引用特化为本子类型的引用</para>
            </summary>
            <param name="model">some bindable model/某种可绑定model</param>
            <returns>Current sub type instance/本类型引用</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetOrCreatePlainLocator(System.String,MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            Gets the or create plain locator.
            </summary>
            <param name="colName">Name of the col.</param>
            <param name="viewModel">The view model.</param>
            <returns>Func&lt;TSubClassType, IValueContainer&gt;.</returns>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._plainPropertyContainerGetters">
            <summary>
            The _plain property container getters
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.SetError(System.String)">
            <summary>
            Sets the error.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.SetErrorAndTryNotify(System.String)">
            <summary>
            Sets the error and try notify.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._Error">
            <summary>
            The _ error
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._ErrorLocator">
            <summary>
            The _ error locator
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.RegisterContainerLocator``1(System.String,System.Func{`0,MVVMSidekick.ViewModels.ValueContainer{``0}})">
            <summary>
            注册一个属性容器的定位器。
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">属性名</param>
            <param name="getOrCreateLocatorMethod">属性定位/创建方法 也就是定位器</param>
            <returns>
            注册后的定位器
            </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer``1(System.String)">
            <summary>
            根据属性名取得一个值容器
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">属性名</param>
            <returns>值容器</returns>
            <exception cref="T:System.Exception">
            Property Not Exists!
            or
            Property ' + propertyName + ' is found but it does not match the property type ' + type of(TProperty).Name + '!
            </exception>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            根据表达式树取得一个值容器
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">表达式树</param>
            <returns>
            值容器
            </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainer(System.String)">
            <summary>
            根据属性名取得一个值容器
            </summary>
            <param name="propertyName">属性名</param>
            <returns>值容器</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainers(System.String[])">
            <summary>
            根据属性名取得多个值容器
            </summary>
            <param name="propertyNames">The property names.</param>
            <returns>值容器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetValueContainers(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据表达式树取得多个值容器
            </summary>
            <param name="expressions">The expressions.</param>
            <returns>值容器</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetColumnError(System.String)">
            <summary>
            获取某一属性的验证错误信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns>错误信息字符串</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetFieldNames">
            <summary>
            获取所有属性名，包括静态声明和动态添加的
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.Clone">
            <summary>
            创建一个VM副本
            </summary>
            <returns>新引用</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.Copyref``1(``0,``0@)">
            <summary>
            Copyrefs the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.CopyTo(`0)">
            <summary>
            Copies to.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetErrors(System.String)">
            <summary>
            Gets the errors.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>System.Collections.IEnumerable.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.RefreshErrors">
            <summary>
            Refreshes the errors.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBase`1.GetAllErrors">
            <summary>
            Gets all errors.
            </summary>
            <returns>ErrorEntity[].</returns>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._EventRouter">
            <summary>
            The _ event router
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._EventRouterLocator">
            <summary>
            The _ event router locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableBase`1._EventRouterDefaultValueFactory">
            <summary>
            The _ event router default value factory
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.BindableInstanceId">
            <summary>
            Gets the bindable instance identifier.
            </summary>
            <value>The bindable instance identifier.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.Item(System.String)">
            <summary>
            根据索引获取属性值
            </summary>
            <param name="colName">Name of the col.</param>
            <returns>属性值</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="E:MVVMSidekick.ViewModels.BindableBase`1.ErrorsChanged">
            <summary>
            Occurs when [errors changed].
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value><c>true</c> if this instance has errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableBase`1.EventRouter">
            <summary>
            给这个模型分配的消息路由引用（延迟加载）
            </summary>
            <value>The event router.</value>
        </member>
        <member name="T:MVVMSidekick.Patterns.ItemsAndSelection.IItemsAndSelectionGroupBinding">
            <summary>
            Interface IItemsAndSelectionGroupBinding
            </summary>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.IItemsAndSelectionGroupBinding.Binder">
            <summary>
            Gets or sets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.ResetSelection">
            <summary>
            Resets the selection.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._Binder">
            <summary>
            The _ binder
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._BinderLocator">
            <summary>
            The _ binder locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._BinderDefaultValueFactory">
            <summary>
            The _ binder default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectionMode">
            <summary>
            The _ selection mode
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectionModeLocator">
            <summary>
            The _ selection mode locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectionModeDefaultValueFactory">
            <summary>
            The _ selection mode default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValuePath">
            <summary>
            The _ selected value path
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValuePathLocator">
            <summary>
            The _ selected value path locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValuePathDefaultValueFactory">
            <summary>
            The _ selected value path default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValue">
            <summary>
            The _ selected value
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValueLocator">
            <summary>
            The _ selected value locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedValueDefaultValueFactory">
            <summary>
            The _ selected value default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._Items">
            <summary>
            The _ items
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._ItemsLocator">
            <summary>
            The _ items locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._ItemsDefaultValueFactory">
            <summary>
            The _ items default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedIndex">
            <summary>
            The _ selected index
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedIndexLocator">
            <summary>
            The _ selected index locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedIndexDefaultValueFactory">
            <summary>
            The _ selected index default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedItem">
            <summary>
            The _ selected item
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedItemLocator">
            <summary>
            The _ selected item locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3._SelectedItemDefaultValueFactory">
            <summary>
            The _ selected item default value factory
            </summary>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.Binder">
            <summary>
            Gets or sets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.BindedTo">
            <summary>
            Gets the binded to.
            </summary>
            <value>The binded to.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <value>The selection mode.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectedValuePath">
            <summary>
            Gets or sets the selected value path.
            </summary>
            <value>The selected value path.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectedValue">
            <summary>
            Gets or sets the selected value.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`3.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroup`1"/> class.
            </summary>
        </member>
        <member name="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder">
            <summary>
            Class ItemsAndSelectionGroupBinder.
            </summary>
        </member>
        <member name="T:MVVMSidekick.Patterns.ElementBinderBase`1">
            <summary>
            Class ElementBinderBase.
            </summary>
            <typeparam name="TSubType">The type of the t sub type.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Patterns.ElementBinderBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.ElementBinderBase`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.ElementBinderBase`1.#ctor(System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.ElementBinderBase`1"/> class.
            </summary>
            <param name="bindingAction">The binding action.</param>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="F:MVVMSidekick.Patterns.ElementBinderBase`1._bindingAction">
            <summary>
            The _binding action
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ElementBinderBase`1._disposeAction">
            <summary>
            The _dispose action
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ElementBinderBase`1.BinderPropertyChangedCallback">
            <summary>
            The binder property changed callback
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ElementBinderBase`1.ElementProperty">
            <summary>
            The element property
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.ElementBinderBase`1._Disposed">
            <summary>
            The _ disposed
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.ElementBinderBase`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MVVMSidekick.Patterns.ElementBinderBase`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.ElementBinderBase`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.ElementBinderBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:MVVMSidekick.Patterns.ElementBinderBase`1.Element">
            <summary>
            Gets or sets the element.
            </summary>
            <value>The element.</value>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder.#ctor(System.Action{MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder},System.Action{MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder})">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder"/> class.
            </summary>
            <param name="bindingAction">The binding action.</param>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder.GetBinder(System.Windows.DependencyObject)">
            <summary>
            Gets the binder.
            </summary>
            <param name="obj">The object.</param>
            <returns>ItemsAndSelectionGroupBinder.</returns>
        </member>
        <member name="M:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder.SetBinder(System.Windows.DependencyObject,MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder)">
            <summary>
            Sets the binder.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:MVVMSidekick.Patterns.ItemsAndSelection.ItemsAndSelectionGroupBinder.BinderProperty">
            <summary>
            The binder property
            </summary>
        </member>
        <member name="T:MVVMSidekick.Patterns.Tree.ITreeItem`2">
            <summary>
            Interface ITreeItem
            </summary>
            <typeparam name="TNodeValue">The type of the t node value.</typeparam>
            <typeparam name="TState">The type of the t state.</typeparam>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.ITreeItem`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.ITreeItem`2.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.ITreeItem`2.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.ITreeItem`2.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.ITreeItem`2.NodeValueType">
            <summary>
            Gets the type of the node value.
            </summary>
            <value>The type of the node value.</value>
        </member>
        <member name="T:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3">
            <summary>
            Class TreeItemModelBase.
            </summary>
            <typeparam name="TNodeValue">The type of the t node value.</typeparam>
            <typeparam name="TState">The type of the t state.</typeparam>
            <typeparam name="TSubType">The type of the t sub type.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._Value">
            <summary>
            The _ value
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ValueLocator">
            <summary>
            The _ value locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ValueDefaultValueFactory">
            <summary>
            The _ value default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._State">
            <summary>
            The _ state
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._StateLocator">
            <summary>
            The _ state locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._StateDefaultValueFactory">
            <summary>
            The _ state default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._Parent">
            <summary>
            The _ parent
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ParentLocator">
            <summary>
            The _ parent locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ParentDefaultValueFactory">
            <summary>
            The _ parent default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._Children">
            <summary>
            The _ children
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ChildrenLocator">
            <summary>
            The _ children locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3._ChildrenDefaultValueFactory">
            <summary>
            The _ children default value factory
            </summary>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.NodeValueType">
            <summary>
            Gets the type of the node value.
            </summary>
            <value>The type of the node value.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeItemModelBase`3.MVVMSidekick#Patterns#Tree#ITreeItem{TNodeValue@TState}#Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:MVVMSidekick.Patterns.Tree.TreeViewItemModel`1">
            <summary>
            Class TreeViewItemModel.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="T:MVVMSidekick.Patterns.Tree.TreeItemModel`2">
            <summary>
            Class TreeItemModel.
            </summary>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <typeparam name="TState">The type of the t state.</typeparam>
        </member>
        <member name="T:MVVMSidekick.Patterns.Tree.TreeViewItemState">
            <summary>
            Class TreeViewItemState.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Patterns.Tree.TreeViewItemState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Patterns.Tree.TreeViewItemState"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsSelected">
            <summary>
            The _ is selected
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsSelectedLocator">
            <summary>
            The _ is selected locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsSelectedDefaultValueFactory">
            <summary>
            The _ is selected default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsChecked">
            <summary>
            The _ is checked
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsCheckedLocator">
            <summary>
            The _ is checked locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._IsCheckedDefaultValueFactory">
            <summary>
            The _ is checked default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._CanBeSelected">
            <summary>
            The _ can be selected
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._CanBeSelectedLocator">
            <summary>
            The _ can be selected locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.Patterns.Tree.TreeViewItemState._CanBeSelectedDefaultValueFactory">
            <summary>
            The _ can be selected default value factory
            </summary>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeViewItemState.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeViewItemState.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value><c>true</c> if this instance is checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.Patterns.Tree.TreeViewItemState.CanBeSelected">
            <summary>
            Gets or sets a value indicating whether this instance can be selected.
            </summary>
            <value><c>true</c> if this instance can be selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MVVMSidekick.Reactive.EventTuple">
            <summary>
            Class EventTuple.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.EventTuple.Create``2(``0,``1)">
            <summary>
            Creates the specified source.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <param name="source">The source.</param>
            <param name="eventArgs">The instance containing the event data.</param>
            <returns>
            EventTuple&lt;TSource, TEventArgs&gt;.
            </returns>
        </member>
        <member name="T:MVVMSidekick.Reactive.EventTuple`2">
            <summary>
            Struct EventTuple
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
        </member>
        <member name="P:MVVMSidekick.Reactive.EventTuple`2.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:MVVMSidekick.Reactive.EventTuple`2.EventArgs">
            <summary>
            Gets or sets the event arguments.
            </summary>
            <value>The event arguments.</value>
        </member>
        <member name="T:MVVMSidekick.Reactive.ReactiveCommand">
            <summary>
            Class ReactiveCommand.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Reactive.ReactiveCommand._LazyObservableExecute">
            <summary>
            The _ lazy observable execute
            </summary>
        </member>
        <member name="F:MVVMSidekick.Reactive.ReactiveCommand._LazyObserverCanExecute">
            <summary>
            The _ lazy observer can execute
            </summary>
        </member>
        <member name="F:MVVMSidekick.Reactive.ReactiveCommand._CurrentCanExecuteObserverValue">
            <summary>
            The _ current can execute observer value
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.ReactiveCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Reactive.ReactiveCommand"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.ReactiveCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Reactive.ReactiveCommand"/> class.
            </summary>
            <param name="canExecute">if set to <c>true</c> [can execute].</param>
        </member>
        <member name="M:MVVMSidekick.Reactive.ReactiveCommand.ConfigReactive">
            <summary>
            Configurations the reactive.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.ReactiveCommand.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.ReactiveCommand.Subscribe(System.IObserver{System.Reactive.EventPattern{MVVMSidekick.Commands.EventCommandEventArgs}})">
            <summary>
            Subscribes the specified observer.
            </summary>
            <param name="observer">The observer.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="P:MVVMSidekick.Reactive.ReactiveCommand.CanExecuteObserver">
            <summary>
            Gets the can execute observer.
            </summary>
            <value>The can execute observer.</value>
        </member>
        <member name="T:MVVMSidekick.Reactive.TaskExecutionWindowEventArg">
            <summary>
            Class TaskExecutionWindowEventArg.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.TaskExecutionWindowEventArg.#ctor(System.Threading.Tasks.Task,MVVMSidekick.Utilities.CallingCodeContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Reactive.TaskExecutionWindowEventArg"/> class.
            </summary>
            <param name="executedTask">The executed task.</param>
            <param name="callingContext">The calling context.</param>
        </member>
        <member name="P:MVVMSidekick.Reactive.TaskExecutionWindowEventArg.TaskWindow">
            <summary>
            Gets the task window.
            </summary>
            <value>The task window.</value>
        </member>
        <member name="P:MVVMSidekick.Reactive.TaskExecutionWindowEventArg.CallingCodeContext">
            <summary>
            Gets the calling code context.
            </summary>
            <value>The calling code context.</value>
        </member>
        <member name="T:MVVMSidekick.Reactive.MVVMRxExtensions">
            <summary>
            		 MVVMRxExtensions
            </summary>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoNotifyEventRouter``1(System.IObservable{``0},MVVMSidekick.EventRouting.EventRouter,System.Object,System.String)">
            <summary>
            Register a Do action to the observer, Notify the value in this sequence to EventRouter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">value sequence</param>
            <param name="eventRouter">target</param>
            <param name="source">value source</param>
            <param name="registerName">log name</param>
            <returns>
            same value sequence inputed
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoNotifyDefaultEventRouter``1(System.IObservable{``0},System.Object,System.String)">
            <summary>
            Register a Do action to the observer, Notify the value in this sequence to EventRouter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">value sequence</param>
            <param name="source">value source</param>
            <param name="registerName">log name</param>
            <returns>
            same value sequence inputed
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUIBusyTask``2(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Does the execute UI busy task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            IObservable&lt;Task&lt;Tout&gt;&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUITask``2(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Does the execute UI task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            IObservable&lt;Task&lt;Tout&gt;&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUIBusyTask``1(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Does the execute UI busy task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            IObservable&lt;Task&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUITask``1(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Does the execute UI task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            IObservable&lt;Task&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUIBusyTask``2(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Does the execute UI busy task.
            </summary>
            <typeparam name="Tin">The type of the tin.</typeparam>
            <typeparam name="Tout">The type of the tout.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <returns>IObservable&lt;Task&lt;Tout&gt;&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUITask``2(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Does the execute UI task.
            </summary>
            <typeparam name="Tin">The type of the tin.</typeparam>
            <typeparam name="Tout">The type of the tout.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <returns>IObservable&lt;Task&lt;Tout&gt;&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUIBusyTask``1(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Does the execute UI busy task.
            </summary>
            <typeparam name="Tin">The type of the tin.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <returns>
            IObservable&lt;Task&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.DoExecuteUITask``1(System.IObservable{``0},MVVMSidekick.ViewModels.IViewModel,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>Does the execute UI task.</summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="vm">The vm.</param>
            <param name="taskBody">The task body.</param>
            <returns>IObservable&lt;Task&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.CreatePropertyChangedObservable(MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            <para>Create a instance of IObservable that fires when property changed event is raised.</para>
            <para>创建一个监视属性变化事件观察者IObservable实例。</para>
            </summary>
            <param name="bindable">The bindable.</param>
            <returns>IObservable&lt;EventPattern&lt;PropertyChangedEventArgs&gt;&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetEventObservable``1(System.Collections.ObjectModel.ObservableCollection{``0},MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            Gets the event observable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="model">The model.</param>
            <returns>
            IObservable&lt;EventPattern&lt;NotifyCollectionChangedEventArgs&gt;&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetNewValueObservable``1(MVVMSidekick.ViewModels.ValueContainer{``0})">
            <summary>Gets the new value observable.</summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <returns>
            IObservable&lt;EventTuple&lt;ValueContainer&lt;TValue&gt;, TValue&gt;&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetEventObservable``1(MVVMSidekick.ViewModels.ValueContainer{``0})">
            <summary>Gets the event observable.</summary>
            <typeparam name="TValue">The type of the t service.</typeparam>
            <param name="source">The source.</param>
            <returns>
            IObservable&lt;EventTuple&lt;ValueContainer&lt;TValue&gt;, ValueChangedEventArgs&lt;TValue&gt;&gt;&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetNullObservable(MVVMSidekick.ViewModels.INotifyChanges)">
            <summary>
            Gets the null observable.
            </summary>
            <param name="source">The source.</param>
            <returns>IObservable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetNamedObservable(MVVMSidekick.ViewModels.INotifyChanges)">
            <summary>
            Gets the named observable.
            </summary>
            <param name="source">The source.</param>
            <returns>IObservable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.ListenChanged``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Listens to the changed properties and merge the event to a sequence.
            </summary>
            <typeparam name="TModel">The type of the source model.</typeparam>
            <param name="source">The source model.</param>
            <param name="properties">The properties expressions.</param>
            <returns>Event sequence</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.AlsoListenChangedWith``1(System.IObservable{MVVMSidekick.Reactive.EventTuple{System.Object,System.String}},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Alsoes the listen changed with.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="sequence">The event sequence.</param>
            <param name="secondSource">The second source.</param>
            <param name="properties">The properties.</param>
            <returns>Merged event Sequence</returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.AsObserver``1(MVVMSidekick.ViewModels.ValueContainer{``0})">
            <summary>
            Cast a value container as a observer.
            </summary>
            <typeparam name="TValue">The type of the value container's value.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.GetRouterEventObservable``1(MVVMSidekick.EventRouting.EventRouter.EventObject{``0})">
            <summary>
            转化
            </summary>
            <typeparam name="TEventArgs"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Reactive.MVVMRxExtensions.ListenToIsUIBusy``3(MVVMSidekick.ViewModels.CommandModel{``0,``1},MVVMSidekick.ViewModels.ViewModelBase{``2},System.Boolean)">
            <summary>
            Bind Command to IsUIBusy property.
            </summary>
            <typeparam name="TCommand">A sub class of ReactiveCommand</typeparam>
            <typeparam name="TResource">The resource type of CommandModel</typeparam>
            <typeparam name="TViewModel">The View Model type command wanna bind to</typeparam>
            <param name="command">Command itself</param>
            <param name="model">The View Model  command wanna bind to</param>
            <param name="canExecuteWhenBusy">if can execute when ui busy , input true</param>
            <returns>command instance itself</returns>
        </member>
        <member name="T:MVVMSidekick.Services.IServiceLocator">
            <summary>
            Interface IServiceLocator
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.HasInstance``1(System.String)">
            <summary>
            Determines whether the specified name has instance.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name has instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.IsAsync``1(System.String)">
            <summary>
            Determines whether the specified name is asynchronous.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is asynchronous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(``0)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(System.String,``0)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(System.Func{System.Object,``0},System.Boolean)">
            <summary>
            Registers the specified factory.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(System.String,System.Func{System.Object,``0},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Resolve``1(System.String,System.Object)">
            <summary>
            Resolves the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>
            TService.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Registers the specified asynchronous factory.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.Register``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator.ResolveAsync``1(System.String,System.Object)">
            <summary>
            Resolves the asynchronous.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>Task&lt;TService&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Services.IServiceLocator`1">
            <summary>
            Interface IServiceLocator
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.HasInstance(System.String)">
            <summary>
            Determines whether the specified name has instance.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name has instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.IsAsync(System.String)">
            <summary>
            Determines whether the specified name is asynchronous.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is asynchronous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(`0)">
            <summary>
            Registers the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(System.String,`0)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(System.Func{System.Object,`0},System.Boolean)">
            <summary>
            Registers the specified factory.
            </summary>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(System.String,System.Func{System.Object,`0},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Resolve(System.String,System.Object)">
            <summary>
            Resolves the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>TService.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(System.Func{System.Object,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            Registers the specified asynchronous factory.
            </summary>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.Register(System.String,System.Func{System.Object,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.IServiceLocator`1.ResolveAsync(System.String,System.Object)">
            <summary>
            Resolves the asynchronous.
            </summary>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>Task&lt;TService&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Services.ServiceLocatorEntryStruct`1">
            <summary>
            Class ServiceLocatorEntryStruct.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Services.ServiceLocatorEntryStruct`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.GetIsValueCreated">
            <summary>
            Gets the is value created.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.GetService(System.Object)">
            <summary>
            Gets the service.
            </summary>
            <param name="paremeter">The paremeter.</param>
            <returns>TService.</returns>
            <exception cref="T:System.ArgumentException">No such value supported in enum  + typeof(CacheType).ToString()</exception>
        </member>
        <member name="F:MVVMSidekick.Services.ServiceLocatorEntryStruct`1._NotFinishedServiceTask">
            <summary>
            The _ not finished service task
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.GetServiceAsync(System.Object)">
            <summary>
            get service as an asynchronous operation.
            </summary>
            <param name="paremeter">The paremeter.</param>
            <returns>Task&lt;TService&gt;.</returns>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.CacheType">
            <summary>
            Gets or sets the type of the cache.
            </summary>
            <value>The type of the cache.</value>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.ServiceInstance">
            <summary>
            Gets or sets the service instance.
            </summary>
            <value>The service instance.</value>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.ServiceFactory">
            <summary>
            Gets or sets the service factory.
            </summary>
            <value>The service factory.</value>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocatorEntryStruct`1.AsyncServiceFactory">
            <summary>
            Gets or sets the asynchronous service factory.
            </summary>
            <value>The asynchronous service factory.</value>
        </member>
        <member name="T:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2">
            <summary>
            Class TypeSpecifiedServiceLocatorBase.
            </summary>
            <typeparam name="TSubClass">The type of the t sub class.</typeparam>
            <typeparam name="TService">The type of the t service.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(`1)">
            <summary>
            Registers the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(System.String,`1)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="instance">The instance.</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(System.Func{System.Object,`1},System.Boolean)">
            <summary>
            Registers the specified factory.
            </summary>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(System.String,System.Func{System.Object,`1},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Resolve(System.String,System.Object)">
            <summary>
            Resolves the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <returns>TService.</returns>
        </member>
        <member name="F:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.dic">
            <summary>
            The dic
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.HasInstance(System.String)">
            <summary>
            Determines whether the specified name has instance.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name has instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(System.Func{System.Object,System.Threading.Tasks.Task{`1}},System.Boolean)">
            <summary>
            Registers the specified asynchronous factory.
            </summary>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.Register(System.String,System.Func{System.Object,System.Threading.Tasks.Task{`1}},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.ResolveAsync(System.String,System.Object)">
            <summary>
            resolve as an asynchronous operation.
            </summary>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>Task&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.TypeSpecifiedServiceLocatorBase`2.IsAsync(System.String)">
            <summary>
            Determines whether the specified name is asynchronous.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is asynchronous; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">No such key</exception>
        </member>
        <member name="T:MVVMSidekick.Services.ServiceLocatorBase`1">
            <summary>
            Class ServiceLocatorBase.
            </summary>
            <typeparam name="TSubClass">The type of the t sub class.</typeparam>
        </member>
        <member name="F:MVVMSidekick.Services.ServiceLocatorBase`1.disposeActions">
            <summary>
            The dispose actions
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(``0)">
            <summary>
            Registers the specified instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(System.String,``0)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <param name="instance">The instance.</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(System.Func{System.Object,``0},System.Boolean)">
            <summary>
            Registers the specified factory.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(System.String,System.Func{System.Object,``0},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Resolve``1(System.String,System.Object)">
            <summary>
            Resolves the specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <param name="paremeters">The paremeters.</param>
            <returns>
            TService.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.HasInstance``1(System.String)">
            <summary>
            Determines whether the specified name has instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name has instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.IsAsync``1(System.String)">
            <summary>
            Determines whether the specified name is asynchronous.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name is asynchronous; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">No such key</exception>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Registers the specified asynchronous factory.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>
            ServiceLocatorEntryStruct&lt;TService&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.Register``1(System.String,System.Func{System.Object,System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="name">The name.</param>
            <param name="asyncFactory">The asynchronous factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns>ServiceLocatorEntryStruct&lt;TService&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocatorBase`1.ResolveAsync``1(System.String,System.Object)">
            <summary>
            resolve as an asynchronous operation.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
            <param name="name">The name.</param>
            <param name="paremeter">The paremeter.</param>
            <returns>Task&lt;TService&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Services.ServiceLocatorBase`1.ServiceTypedCache`1">
            <summary>
            Class ServiceTypedCache.
            </summary>
            <typeparam name="TService">The type of the t service.</typeparam>
        </member>
        <member name="F:MVVMSidekick.Services.ServiceLocatorBase`1.ServiceTypedCache`1.dic">
            <summary>
            The dic
            </summary>
        </member>
        <member name="T:MVVMSidekick.Services.CacheType">
            <summary>
            Enum CacheType
            </summary>
        </member>
        <member name="F:MVVMSidekick.Services.CacheType.Instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="F:MVVMSidekick.Services.CacheType.Factory">
            <summary>
            The factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Services.CacheType.LazyInstance">
            <summary>
            The lazy instance
            </summary>
        </member>
        <member name="F:MVVMSidekick.Services.CacheType.AsyncFactory">
            <summary>
            The asynchronous factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.Services.CacheType.AsyncLazyInstance">
            <summary>
            The asynchronous lazy instance
            </summary>
        </member>
        <member name="T:MVVMSidekick.Services.ServiceLocator">
            <summary>
            Class ServiceLocator. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MVVMSidekick.Services.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Services.ServiceLocator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MVVMSidekick.Services.ServiceLocator"/> class from being created.
            </summary>
        </member>
        <member name="P:MVVMSidekick.Services.ServiceLocator.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:MVVMSidekick.Utilities.Runtime">
            <summary>
            Class Runtime.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.Runtime._IsInDesignMode">
            <summary>
            The _ is in design mode
            </summary>
        </member>
        <member name="P:MVVMSidekick.Utilities.Runtime.IsInDesignMode">
            <summary>
            <para>Gets if the code is running in design time. </para>
            <para>读取目前是否在设计时状态。</para>
            </summary>
            <value><c>true</c> if this instance is in design mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MVVMSidekick.Utilities.CallingCodeContext">
            <summary>
            代码调用上下文
            Calling code-context
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.CallingCodeContext.#ctor(System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个当前调用上下文数据
            </summary>
            <param name="autoFillProperties">if set to <c>true</c> [automatic fill properties].</param>
            <param name="comment">注释</param>
            <param name="caller">调用者</param>
            <param name="file">文件</param>
            <param name="line">行数</param>
        </member>
        <member name="M:MVVMSidekick.Utilities.CallingCodeContext.Create(System.String,System.String,System.String,System.Int32)">
            <summary>
            创建一个当前调用上下文数据
            </summary>
            <param name="comment">注释</param>
            <param name="caller">调用者</param>
            <param name="file">文件</param>
            <param name="line">行数</param>
            <returns>数据</returns>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Comment">
            <summary>
            <para>Comment of this Calling .</para>
            <para>对此次Calling 的附加说明</para>
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Caller">
            <summary>
            <para>Caller Member Name of this Calling  registeration.</para>
            <para>此次Calling 注册的来源</para>
            </summary>
            <value>The caller.</value>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.File">
            <summary>
            <para>Code file path of this Calling  registeration.</para>
            <para>注册此次Calling 注册的代码文件</para>
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:MVVMSidekick.Utilities.CallingCodeContext.Line">
            <summary>
            <para>Code line number of this Calling  registeration.</para>
            <para>注册此次Calling 注册的代码行</para>
            </summary>
            <value>The line.</value>
        </member>
        <member name="T:MVVMSidekick.Utilities.TaskExHelper">
            <summary>
            Unify Task(4.5) and TaskEx (SL5) method in this helper
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.TaskExHelper.Yield">
            <summary>
            Yields this instance.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.TaskExHelper.FromResult``1(``0)">
            <summary>
            Froms the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns>
            Task&lt;T&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.TaskExHelper.Delay(System.Int32)">
            <summary>
            Delays the specified ms.
            </summary>
            <param name="ms">The ms.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.TypeInfoHelper">
            <summary>
            Class TypeInfoHelper.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.TypeInfoHelper.GetTypeOrTypeInfo(System.Type)">
            <summary>
            Gets the type or type information.
            </summary>
            <param name="type">The type.</param>
            <returns>Type.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.ReflectionCache">
            <summary>
            Class ReflectionCache.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.ReflectionCache.GetMethodsFromCache(System.Type)">
            <summary>
            Gets the methods from cache.
            </summary>
            <param name="type">The type.</param>
            <returns>Dictionary&lt;System.String, MethodInfo&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.ReflectionCache.GetEventsFromCache(System.Type)">
            <summary>
            Gets the events from cache.
            </summary>
            <param name="type">The type.</param>
            <returns>Dictionary&lt;System.String, EventInfo&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.ReflectionCache.ReflectInfoCache`1">
            <summary>
            Class ReflectInfoCache.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MVVMSidekick.Utilities.ReflectionCache.ReflectInfoCache`1.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.ReflectionCache.ReflectInfoCache`1.GetCache(System.Type,System.Func{System.Type,`0[]})">
            <summary>
            Gets the cache.
            </summary>
            <param name="type">The type.</param>
            <param name="dataGetter">The data getter.</param>
            <returns>Dictionary&lt;System.String, T&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.EventHandlerInvoker">
            <summary>
            Inveoker of event handler
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event arguments.</param>
            <param name="eventName">Name of the event.</param>
            <param name="eventHandlerType">Type of the event handler.</param>
        </member>
        <member name="T:MVVMSidekick.Utilities.EventHandlerHelper">
            <summary>
            Class EventHandlerHelper.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.EventHandlerHelper.CreateHandler(System.Linq.Expressions.Expression{MVVMSidekick.Utilities.EventHandlerInvoker},System.String,System.Type,System.Type[])">
            <summary>
            Creates the handler.
            </summary>
            <param name="bind">The bind.</param>
            <param name="eventName">Name of the event.</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="eventParametersTypes">The event parameters types.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.EventHandlerHelper.BindEvent(System.Object,System.String,MVVMSidekick.Utilities.EventHandlerInvoker)">
            <summary>
            Binds the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <param name="executeAction">The execute action.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.EventHandlerHelper.DoNetEventBind(System.Object,System.Reflection.EventInfo,System.Delegate)">
            <summary>
            Does the net event bind.
            </summary>
            <param name="sender">The sender.</param>
            <param name="ei">The ei.</param>
            <param name="newHandler">The new handler.</param>
            <returns>IDisposable.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.ColllectionHelper">
            <summary>
            Class ColllectionHelper.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.ColllectionHelper.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To the observable collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>ObservableCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.ColllectionHelper.MatchOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Matches the or default.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dic">The dic.</param>
            <param name="key">The key.</param>
            <returns>
            TValue.
            </returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.ExpressionHelper">
            <summary>
            Class ExpressionHelper.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.ExpressionHelper.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the property.
            </summary>
            <typeparam name="TSubClassType">The type of the sub class type.</typeparam>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
            System.String.
            </returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the name of the property.
            </summary>
            <typeparam name="TSubClassType">The type of the sub class type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
            System.String.
            </returns>
            <exception cref="T:System.InvalidOperationException">The expression inputed should be like \x=&gt;x.PropertyName\ but currently is not: + expression.ToString()</exception>
        </member>
        <member name="T:MVVMSidekick.Utilities.ConcurrentDictionary`2">
            <summary>
            Class ConcurrentDictionary.
            </summary>
            <typeparam name="TK">The type of the t property.</typeparam>
            <typeparam name="TV">The type of the tv.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Utilities.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Gets the or add.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">The factory.</param>
            <returns>TV.</returns>
        </member>
        <member name="T:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>
            Whether the current thread is processing work items.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>
            The list of tasks to be executed.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>
            The maximum concurrency level allowed by this scheduler.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>
            Whether the scheduler is currently processing work items.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">maxDegreeOfParallelism</exception>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a task to the scheduler.
            </summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Attempts to execute the specified task on the current thread.
            </summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">if set to <c>true</c> [task was previously queued].</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>
            Attempts to remove a previously scheduled task from the scheduler.
            </summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="M:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>
            Gets an enumerable of the tasks currently scheduled on this scheduler.
            </summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:MVVMSidekick.Utilities.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level supported by this scheduler.
            </summary>
            <value>The maximum concurrency level.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ViewModel">
            <summary>
            <para>A ViewModel by default, with basic implement of name-value container.</para>
            <para>缺省的 ViewModel。可以用作最简单的字典绑定</para>
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ViewModelBase`1">
            <summary>
            一个VM,带有若干界面特性
            </summary>
            <typeparam name="TViewModel">本身的类型</typeparam>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IViewModel">
            <summary>
            Interface IViewModel
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IViewModelLifetime">
            <summary>
            Interface IViewModelLifetime
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModelLifetime.OnBindedToView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Called when [binded to view].
            </summary>
            <param name="view">The view.</param>
            <param name="oldValue">The old value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModelLifetime.OnUnbindedFromView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Called when [unbinded from view].
            </summary>
            <param name="view">The view.</param>
            <param name="newValue">The new value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModelLifetime.OnBindedViewLoad(MVVMSidekick.Views.IView)">
            <summary>
            Called when [binded view load].
            </summary>
            <param name="view">The view.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModelLifetime.OnBindedViewUnload(MVVMSidekick.Views.IView)">
            <summary>
            Called when [binded view unload].
            </summary>
            <param name="view">The view.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.WaitForClose(System.Action)">
            <summary>
            Waits for close.
            </summary>
            <param name="closingCallback">The closing callback.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.CloseViewAndDispose">
            <summary>
            Closes the view and dispose.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>in value</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>out value</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask``1(System.Func{``0,System.Threading.Tasks.Task},``0,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel.ExecuteTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <param name="taskBody">The task body.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>Task.</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.Dispatcher">
            <summary>
            Gets the dispatcher of view.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.IsUIBusy">
            <summary>
            Gets a value indicating whether this instance is UI busy.
            </summary>
            <value><c>true</c> if this instance is UI busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.HaveReturnValue">
            <summary>
            Gets a value indicating whether [have return value].
            </summary>
            <value><c>true</c> if [have return value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.StageManager">
            <summary>
            Gets or sets the stage manager.
            </summary>
            <value>The stage manager.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.IsDisposingWhenUnbindRequired">
            <summary>
            Set: Will VM be Disposed when unbind from View.
            </summary>
            <value><c>true</c> if this instance is disposing when unbind required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel.IsDisposingWhenUnloadRequired">
            <summary>
            Set: Will VM be Disposed when unload from View.
            </summary>
            <value><c>true</c> if this instance is disposing when unload required; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.ViewModelBase`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.MVVMSidekick#ViewModels#IViewModelLifetime#OnBindedToView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Called when [binded to view].
            </summary>
            <param name="view">The view.</param>
            <param name="oldValue">The old value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.MVVMSidekick#ViewModels#IViewModelLifetime#OnUnbindedFromView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Called when [unbinded from view].
            </summary>
            <param name="view">The view.</param>
            <param name="newValue">The new value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.MVVMSidekick#ViewModels#IViewModelLifetime#OnBindedViewLoad(MVVMSidekick.Views.IView)">
            <summary>
            Called when [binded view load].
            </summary>
            <param name="view">The view.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.MVVMSidekick#ViewModels#IViewModelLifetime#OnBindedViewUnload(MVVMSidekick.Views.IView)">
            <summary>
            Called when [binded view unload].
            </summary>
            <param name="view">The view.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedToView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            This will be invoked by view when this viewmodel is set to view's ViewModel property.
            </summary>
            <param name="view">Set target view</param>
            <param name="oldValue">Value before set.</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnUnbindedFromView(MVVMSidekick.Views.IView,MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            This will be invoked by view when this instance of viewmodel in ViewModel property is overwritten.
            </summary>
            <param name="view">Overwrite target view.</param>
            <param name="newValue">The value replacing</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedViewLoad(MVVMSidekick.Views.IView)">
            <summary>
            This will be invoked by view when the view fires Load event and this viewmodel instance is already in view's ViewModel property
            </summary>
            <param name="view">View that firing Load event</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.OnBindedViewUnload(MVVMSidekick.Views.IView)">
            <summary>
            This will be invoked by view when the view fires Unload event and this viewmodel instance is still in view's  ViewModel property
            </summary>
            <param name="view">View that firing Unload event</param>
            <returns>Task awaiter</returns>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._StageManager">
            <summary>
            The _ stage manager
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._IsUIBusy">
            <summary>
            The _ is UI busy
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._IsUIBusyLocator">
            <summary>
            The _ is UI busy locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._IsUIBusyDefaultValueFactory">
            <summary>
            The _ is UI busy default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._UIBusyTaskCount">
            <summary>
            The _ UI busy task count
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._UIBusyTaskCountLocator">
            <summary>
            The _ UI busy task count locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`1._UIBusyTaskCountDefaultValueFactory">
            <summary>
            The _ UI busy task count default value factory
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.WaitForClose(System.Action)">
            <summary>
            Waits for close.
            </summary>
            <param name="closingCallback">The closing callback.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.CloseViewAndDispose">
            <summary>
            Closes the view and dispose.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.RunOnDispatcher(System.Action)">
            <summary>
            Runs the on dispatcher.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the tin.</typeparam>
            <typeparam name="Tout">The type of the tout.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>Task&lt;Tout&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>
            Task.
            </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the tin.</typeparam>
            <typeparam name="Tout">The type of the tout.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>Task&lt;Tout&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask``1(System.Func{``0,System.Threading.Tasks.Task},``0,System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tin">The type of the in.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="inputContext">The input context.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>
            Task.
            </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <typeparam name="Tout">The type of the out.</typeparam>
            <param name="taskBody">The task body.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>
            Task&lt;Tout&gt;.
            </returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.ExecuteTask(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Executes the task.
            </summary>
            <param name="taskBody">The task body.</param>
            <param name="UIBusyWhenExecuting">if set to <c>true</c> [UI busy when executing].</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`1.GetCurrentViewDispatcher">
            <summary>
            Gets the current view dispatcher.
            </summary>
            <returns>Dispatcher.</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsDisposingWhenUnbindRequired">
            <summary>
            Set: Will VM be Disposed when unbind from View.
            </summary>
            <value><c>true</c> if this instance is disposing when unbind required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsDisposingWhenUnloadRequired">
            <summary>
            Set: Will VM be Disposed when unload from View.
            </summary>
            <value><c>true</c> if this instance is disposing when unload required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.StageManager">
            <summary>
            Gets or sets the stage manager.
            </summary>
            <value>The stage manager.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.HaveReturnValue">
            <summary>
            是否有返回值
            </summary>
            <value><c>true</c> if [have return value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.IsUIBusy">
            <summary>
            本UI是否处于忙状态
            </summary>
            <value><c>true</c> if this instance is UI busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.UIBusyTaskCount">
            <summary>
            Gets or sets the UI busy task count.
            </summary>
            <value>The UI busy task count.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`1.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableBaseExtensions">
            <summary>
            <para>Extension methods of models</para>
            <para>为Model增加的一些快捷方法</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.Config``1(MVVMSidekick.ViewModels.ValueContainer{``0},System.Action{MVVMSidekick.ViewModels.ValueContainer{``0}})">
            <summary>
            <para>Config Value Container with delegate</para>
            <para>使用连续的API设置ValueContainer的一些参数</para>
            </summary>
            <typeparam name="TProperty">ValueContainer内容的类型</typeparam>
            <param name="target">ValueContainer的配置目标实例</param>
            <param name="action">配置内容</param>
            <returns>ValueContainer的配置目标实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.DisposeWith``1(``0,MVVMSidekick.ViewModels.IDisposeGroup,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Add Idisposeable to model's despose action list</para>
            <para>将IDisposable 对象注册到VM中的销毁对象列表。</para>
            </summary>
            <typeparam name="T">Type of Model /Model的类型</typeparam>
            <param name="item">IDisposable Inastance/IDisposable实例</param>
            <param name="tg">The tg.</param>
            <param name="needCheckInFinalizer">if set to <c>true</c> [need check in finalizer].</param>
            <param name="comment">The comment.</param>
            <param name="caller">The caller.</param>
            <param name="file">The file.</param>
            <param name="line">The line.</param>
            <returns>T.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.Initialize``1(MVVMSidekick.ViewModels.BindableBase,System.String,MVVMSidekick.ViewModels.Property{``0}@,System.Func{MVVMSidekick.ViewModels.BindableBase,MVVMSidekick.ViewModels.ValueContainer{``0}}@,System.Func{``0})">
            <summary>
            Initializes the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model">The model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="reference">The reference.</param>
            <param name="locator">The locator.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>ValueContainer&lt;T&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableBaseExtensions.Initialize``1(MVVMSidekick.ViewModels.BindableBase,System.String,MVVMSidekick.ViewModels.Property{``0}@,System.Func{MVVMSidekick.ViewModels.BindableBase,MVVMSidekick.ViewModels.ValueContainer{``0}}@,System.Func{MVVMSidekick.ViewModels.BindableBase,``0})">
            <summary>
            Initializes the specified property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model">The model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="reference">The reference.</param>
            <param name="locator">The locator.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>ValueContainer&lt;T&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.ViewModels.Property`1">
            <summary>
            <para>A slot to place the value container field and value container locator.</para>
            <para>属性定义。一个属性定义包括一个创建/定位属性“值容器”的静态方法引用，和一个缓存该方法执行结果“值容器”的槽位</para>
            </summary>
            <typeparam name="TProperty">Type of the property value /属性的类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.Property`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.Property`1"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.Property`1.LocateValueContainer(MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            <para>Locate or create the value container of this model intances</para>
            <para>通过定位方法定位本Model实例中的值容器</para>
            </summary>
            <param name="model">Model intances/model 实例</param>
            <returns>Value Container of this property/值容器</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.Property`1.LocatorFunc">
            <summary>
            <para>Gets sets the factory to locate/create value container of this model instance</para>
            <para>读取/设置定位值容器用的方法。</para>
            </summary>
            <value>The locator function.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.Property`1.Container">
            <summary>
            <para>Gets or sets Value Container, it can be recently create and cached here，by LocatorFunc </para>
            <para>读取/设置值容器,这事值容器LocatorFunc创建值容器并且缓存的位置 </para>
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ValueContainer`1">
            <summary>
            <para>Value Container, holds the value of certain field, with notifition /and compare support</para>
            <para>值容器</para>
            </summary>
            <typeparam name="TProperty">Type of the property value /属性的类型</typeparam>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IErrorInfo">
            <summary>
            Interface IErrorInfo
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IErrorInfo.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IValueCanSet`1">
            <summary>
            Interface IValueCanSet
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IValueCanSet`1.Value">
            <summary>
            Sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IValueCanGet`1">
            <summary>
            Interface IValueCanGet
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IValueCanGet`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IValueContainer">
            <summary>
            Interface IValueContainer
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.INotifyChanges">
            <summary>
            Interface INotifyChanges
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.INotifyChanges.ValueChangedWithNameOnly">
            <summary>
            Occurs when [value changed with name only].
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.INotifyChanges.ValueChangedWithNothing">
            <summary>
            Occurs when [value changed with nothing].
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IValueContainer.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IValueContainer.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IValueContainer.IsCopyToAllowed">
            <summary>
            Gets or sets a value indicating whether this instance is copy to allowed.
            </summary>
            <value><c>true</c> if this instance is copy to allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.INotifyChanges`1">
            <summary>
            Interface INotifyChanges
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:MVVMSidekick.ViewModels.INotifyChanges`1.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.#ctor(System.String,MVVMSidekick.ViewModels.BindableBase,`0)">
            <summary>
            <para>Create a new Value Container</para>
            <para>创建属性值容器</para>
            </summary>
            <param name="info">Property name/属性名</param>
            <param name="model"><para>The model that Value Container will be held with.</para>
            <para>所属的model实例</para></param>
            <param name="initValue">The first value of this container/初始值</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.#ctor(System.String,MVVMSidekick.ViewModels.BindableBase,System.Func{`0,`0,System.Boolean},`0)">
            <summary>
            <para>Create a new Value Container</para>
            <para>创建属性值容器</para>
            </summary>
            <param name="info">Property name/属性名</param>
            <param name="model"><para>The model that Value Container will be held with.</para>
            <para>所属的model实例</para></param>
            <param name="equalityComparer"><para>Comparer of new/old value, for notifition.</para>
            <para>判断两个值是否相等的比较器,用于判断是否通知变更</para></param>
            <param name="initValue">The first value of this container/初始值</param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ValueContainer`1._value">
            <summary>
            The _value
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.SetValueAndTryNotify(`0)">
            <summary>
            <para>Save the value and try raise the value changed event</para>
            <para>保存值并且尝试触发更改事件</para>
            </summary>
            <param name="value">New value/属性值</param>
            <returns>ValueContainer&lt;TProperty&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.SetValue(`0)">
            <summary>
            <para>Save the value and do not try raise the value changed event</para>
            <para>仅保存值 不尝试触发更改事件</para>
            </summary>
            <param name="value">New value/属性值</param>
            <returns>ValueContainer&lt;TProperty&gt;.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueContainer`1.InternalPropertyChange(MVVMSidekick.ViewModels.BindableBase,`0,`0@,System.String)">
            <summary>
            Internals the property change.
            </summary>
            <param name="objectInstance">The object instance.</param>
            <param name="newValue">The new value.</param>
            <param name="currentValue">The current value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ValueContainer`1._Errors">
            <summary>
            The _ errors
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ValueContainer`1._IsCopyToAllowed">
            <summary>
            The _ is copy to allowed
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.ValueContainer`1.ValueChanged">
            <summary>
            <para>Event that raised when value was changed</para>
            <para>值变更时触发的事件</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.EqualityComparer">
            <summary>
            <para>Gets comparer instance of new/old value, for notifition.</para>
            <para>读取判断两个值是否相等的比较器,用于判断是否通知变更</para>
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.PropertyName">
            <summary>
            Property name /属性名
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.Value">
            <summary>
            Value/值
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.Model">
            <summary>
            <para>The model instance that Value Container was held.</para>
            <para>此值容器所在的Model</para>
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.MVVMSidekick#ViewModels#IValueContainer#Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.PropertyType">
            <summary>
            Gets the type of property/读取值类型
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueContainer`1.IsCopyToAllowed">
            <summary>
            <para>Can be copied by CopyTo method</para>
            <para>是否可以被 `Copyto` 复制到另外一个属性</para>
            </summary>
            <value><c>true</c> if this instance is copy to allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:MVVMSidekick.ViewModels.ValueContainer`1.ValueChangedWithNameOnly">
            <summary>
            Occurs when [value changed with name only].
            </summary>
        </member>
        <member name="E:MVVMSidekick.ViewModels.ValueContainer`1.ValueChangedWithNothing">
            <summary>
            Occurs when [value changed with nothing].
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ValueChangedEventArgs`1">
            <summary>
            <para>Event args that fired when property changed, with old value and new value field.</para>
            <para>值变化事件参数</para>
            </summary>
            <typeparam name="TProperty">Type of propery/变化属性的类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Constructor of ValueChangedEventArgs
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.NewValue">
            <summary>
            New Value
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ValueChangedEventArgs`1.OldValue">
            <summary>
            Old Value
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableTuple`2">
            <summary>
            <para>A Bindebale Tuple</para>
            <para>一个可绑定的Tuple实现</para>
            </summary>
            <typeparam name="TItem1">Type of first item/第一个元素的类型</typeparam>
            <typeparam name="TItem2">Type of second item/第二个元素的类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.BindableTuple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item1">
            <summary>
            The _ item1
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item1Locator">
            <summary>
            The _ item1 locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item1DefaultValueFactory">
            <summary>
            The _ item1 default value factory
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item2">
            <summary>
            The _ item2
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item2Locator">
            <summary>
            The _ item2 locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.BindableTuple`2._Item2DefaultValueFactory">
            <summary>
            The _ item2 default value factory
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableTuple`2.Item1">
            <summary>
            第一个元素
            </summary>
            <value>The item1.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.BindableTuple`2.Item2">
            <summary>
            第二个元素
            </summary>
            <value>The item2.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.BindableTuple">
            <summary>
            <para>Fast create Bindable Tuple </para>
            <para>帮助快速创建BindableTuple的帮助类</para>
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.BindableTuple.Create``2(``0,``1)">
            <summary>
            Create a Tuple
            </summary>
            <typeparam name="TItem1">The type of the item1.</typeparam>
            <typeparam name="TItem2">The type of the item2.</typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <returns>
            BindableTuple&lt;TItem1, TItem2&gt;.
            </returns>
        </member>
        <member name="T:MVVMSidekick.ViewModels.DisposeEventArgs">
            <summary>
            Class DisposeEventArgs.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeEventArgs.Create(MVVMSidekick.ViewModels.DisposeEntry)">
            <summary>
            Creates the specified information.
            </summary>
            <param name="info">The information.</param>
            <returns>DisposeEventArgs.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.DisposeEventArgs.#ctor(MVVMSidekick.ViewModels.DisposeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.DisposeEventArgs"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEventArgs.DisposeEntry">
            <summary>
            Gets the dispose entry.
            </summary>
            <value>The dispose entry.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.DisposeEntry">
            <summary>
            <para>Dispose action infomation struct</para>
            <para>注册销毁方法时的相关信息</para>
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.CallingCodeContext">
            <summary>
            <para>Code Context in this dispose action execution register .</para>
            <para>执行代码上下文</para>
            </summary>
            <value>The calling code context.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.IsNeedCheckOnFinalizer">
            <summary>
            是否为托管资源，需要在析构器强制检查
            </summary>
            <value><c>true</c> if this instance is need check on finalizer; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.Exception">
            <summary>
            <para>Exception thrown in this dispose action execution .</para>
            <para>执行此次Dispose动作产生的Exception</para>
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.DisposeEntry.Action">
            <summary>
            <para>Dispose action.</para>
            <para>Dispose动作</para>
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.IViewModel`1">
            <summary>
            Interface IViewModel
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.IViewModel`1.WaitForCloseWithResult(System.Action)">
            <summary>
            Waits for close with result.
            </summary>
            <param name="closingCallback">The closing callback.</param>
            <returns>Task&lt;TResult&gt;.</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.IViewModel`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.NoResult">
            <summary>
            Struct NoResult
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ShowAwaitableResult`1">
            <summary>
            Struct ShowAwaitableResult
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ShowAwaitableResult`1.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ShowAwaitableResult`1.Closing">
            <summary>
            Gets or sets the closing.
            </summary>
            <value>The closing.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ViewModelBase`2">
            <summary>
            Class ViewModelBase.
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ViewModelBase`2.WaitForCloseWithResult(System.Action)">
            <summary>
            Waits for close with result.
            </summary>
            <param name="closingCallback">The closing callback.</param>
            <returns>Task&lt;TResult&gt;.</returns>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`2._Result">
            <summary>
            The _ result
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.ViewModelBase`2._ResultLocator">
            <summary>
            The _ result locator
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`2.HaveReturnValue">
            <summary>
            Gets a value indicating whether [have return value].
            </summary>
            <value><c>true</c> if [have return value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ViewModelBase`2.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ErrorEntity">
            <summary>
            Class ErrorEntity.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.ErrorEntity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ErrorEntity.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ErrorEntity.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ErrorEntity.InnerErrorInfoSource">
            <summary>
            Gets or sets the inner error information source.
            </summary>
            <value>The inner error information source.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.ICommandModel`2">
            <summary>
            Interface ICommandModel
            </summary>
            <typeparam name="TCommand">The type of the t command.</typeparam>
            <typeparam name="TResource">The type of the t resource.</typeparam>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ICommandModel`2.CommandCore">
            <summary>
            Gets the command core.
            </summary>
            <value>The command core.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ICommandModel`2.LastCanExecuteValue">
            <summary>
            Gets or sets a value indicating whether [last can execute value].
            </summary>
            <value><c>true</c> if [last can execute value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.ICommandModel`2.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.StringResourceReactiveCommandModel">
            <summary>
            Class StringResourceReactiveCommandModel.
            </summary>
        </member>
        <member name="T:MVVMSidekick.ViewModels.CommandModel`2">
            <summary>
            用于封装ICommand的ViewModel。一般包括一个Command实例和对应此实例的一组资源
            </summary>
            <typeparam name="TCommand">ICommand 详细类型</typeparam>
            <typeparam name="TResource">配合Command 的资源类型</typeparam>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.ViewModels.CommandModel`2"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.#ctor(`0,`1)">
            <summary>
            构造器
            </summary>
            <param name="commandCore">ICommand核心</param>
            <param name="resource">初始资源</param>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.commandCore_CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CanExecuteChanged event of the commandCore control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:MVVMSidekick.ViewModels.CommandModel`2._LastCanExecuteValue">
            <summary>
            The _ last can execute value
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.CommandModel`2._LastCanExecuteValueLocator">
            <summary>
            The _ last can execute value locator
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.CommandModel`2._Resource">
            <summary>
            The _ resource
            </summary>
        </member>
        <member name="F:MVVMSidekick.ViewModels.CommandModel`2._ResourceLocator">
            <summary>
            The _ resource locator
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.CanExecute(System.Object)">
            <summary>
            判断是否可执行
            </summary>
            <param name="parameter">指定参数</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModel`2.Execute(System.Object)">
            <summary>
            执行
            </summary>
            <param name="parameter">指定参数</param>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.CommandCore">
            <summary>
            ICommand核心
            </summary>
            <value>The command core.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.LastCanExecuteValue">
            <summary>
            上一次是否能够运行的值
            </summary>
            <value><c>true</c> if [last can execute value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.Resource">
            <summary>
            资源
            </summary>
            <value>The resource.</value>
        </member>
        <member name="E:MVVMSidekick.ViewModels.CommandModel`2.CanExecuteChanged">
            <summary>
            Occurs when [can execute changed].
            </summary>
        </member>
        <member name="P:MVVMSidekick.ViewModels.CommandModel`2.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="T:MVVMSidekick.ViewModels.CommandModelExtensions">
            <summary>
            可绑定的CommandVM 扩展方法集
            </summary>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.CreateCommandModel``2(``0,``1)">
            <summary>
            根据ICommand实例创建CommandModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <typeparam name="TResource">附加资源类型</typeparam>
            <param name="command">ICommand实例</param>
            <param name="resource">资源实例</param>
            <returns>CommandModel实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.CreateCommandModel``1(``0,System.Object)">
            <summary>
            据ICommand实例创建不具备/弱类型资源的CommandModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <param name="command">ICommand实例</param>
            <param name="resource">资源实例</param>
            <returns>CommandModel实例</returns>
        </member>
        <member name="M:MVVMSidekick.ViewModels.CommandModelExtensions.WithViewModel``2(MVVMSidekick.ViewModels.CommandModel{``0,``1},MVVMSidekick.ViewModels.BindableBase)">
            <summary>
            为CommandModel指定ViewModel
            </summary>
            <typeparam name="TCommand">ICommand实例的具体类型</typeparam>
            <typeparam name="TResource">附加资源类型</typeparam>
            <param name="cmdModel">CommandModel具体实例</param>
            <param name="viewModel">ViewModel具体实例</param>
            <returns>CommandModel&lt;TCommand, TResource&gt;.</returns>
        </member>
        <member name="T:MVVMSidekick.Views.ViewHelper">
            <summary>
            Class ViewHelper.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewHelper.DEFAULT_VM_NAME">
            <summary>
            The default vm name
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.ViewHelper.GetDefaultDesigningViewModel(MVVMSidekick.Views.IView)">
            <summary>
            Gets the default designing view model.
            </summary>
            <param name="view">The view.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="F:MVVMSidekick.Views.ViewHelper.ViewUnloadCallBack">
            <summary>
            The view unload call back
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewHelper.DesigningViewModelChangedCallBack">
            <summary>
            The designing view model changed call back
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewHelper.ViewModelChangedCallback">
            <summary>
            The view model changed callback
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.ViewHelper.GetContentAndCreateIfNull(MVVMSidekick.Views.IView)">
            <summary>
            Gets the content and create if null.
            </summary>
            <param name="control">The control.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewHelper.SelfClose(MVVMSidekick.Views.IView)">
            <summary>
            Selfs the close.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:MVVMSidekick.Views.MVVMPage">
            <summary>
            Class MVVMPage.
            </summary>
        </member>
        <member name="T:MVVMSidekick.Views.IView">
            <summary>
            Interface IView
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.IView.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.Views.IView.ViewType">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="P:MVVMSidekick.Views.IView.ContentObject">
            <summary>
            Gets or sets the content object.
            </summary>
            <value>The content object.</value>
        </member>
        <member name="P:MVVMSidekick.Views.IView.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.MVVMPage"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.#ctor(MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.MVVMPage"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="F:MVVMSidekick.Views.MVVMPage.IsLoaded">
            <summary>
            The is loaded
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Handles the <see cref="E:NavigatedTo"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMPage.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Handles the <see cref="E:NavigatedFrom"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Navigation.NavigationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:MVVMSidekick.Views.MVVMPage.ViewModelProperty">
            <summary>
            The view model property
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMPage.ContentObject">
            <summary>
            Gets or sets the content object.
            </summary>
            <value>The content object.</value>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMPage.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMPage.ViewType">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="T:MVVMSidekick.Views.MVVMControl">
            <summary>
            Class MVVMControl.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.MVVMControl"/> class.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.MVVMControl.#ctor(MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.MVVMControl"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="F:MVVMSidekick.Views.MVVMControl.ViewModelProperty">
            <summary>
            The view model property
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMControl.ContentObject">
            <summary>
            Gets or sets the content object.
            </summary>
            <value>The content object.</value>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMControl.ViewModel">
            <summary>
            Gets or sets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:MVVMSidekick.Views.MVVMControl.ViewType">
            <summary>
            Gets the type of the view.
            </summary>
            <value>The type of the view.</value>
        </member>
        <member name="T:MVVMSidekick.Views.ViewType">
            <summary>
            Enum ViewType
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewType.Page">
            <summary>
            The page
            </summary>
            <summary>
            The page
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewType.Window">
            <summary>
            The window
            </summary>
            <summary>
            The window
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.ViewType.Control">
            <summary>
            The control
            </summary>
            <summary>
            The control
            </summary>
        </member>
        <member name="T:MVVMSidekick.Views.IView`1">
            <summary>
            Interface IView
            </summary>
            <typeparam name="TViewModel">The type of the t view model.</typeparam>
        </member>
        <member name="P:MVVMSidekick.Views.IView`1.SpecificTypedViewModel">
            <summary>
            Gets or sets the specific typed view model.
            </summary>
            <value>The specific typed view model.</value>
        </member>
        <member name="T:MVVMSidekick.Views.ViewModelToViewMapper`1">
            <summary>
            Struct ViewModelToViewMapper
            </summary>
            <typeparam name="TModel">The type of the t model.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapViewToViewModel``1">
            <summary>
            Maps the view to view model.
            </summary>
            <typeparam name="TView">The type of the t view.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToDefaultControl``1(``0)">
            <summary>
            Maps to default control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToControl``1(System.String,``0)">
            <summary>
            Maps to control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="viewMappingKey">The view mapping key.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToDefaultControl``1(System.Boolean)">
            <summary>
            Maps to default control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToControl``1(System.String,System.Boolean)">
            <summary>
            Maps to control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="viewMappingKey">The view mapping key.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToDefaultControl``1(System.Func{`0,``0},System.Boolean)">
            <summary>
            Maps to default control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToControl``1(System.String,System.Func{`0,``0},System.Boolean)">
            <summary>
            Maps to control.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="viewMappingKey">The view mapping key.</param>
            <param name="factory">The factory.</param>
            <param name="alwaysNew">if set to <c>true</c> [always new].</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapToDefault``1(System.Uri)">
            <summary>
            Maps to default.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="baseUri">The base URI.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapper`1.MapTo``1(System.String,System.Uri)">
            <summary>
            Maps to.
            </summary>
            <typeparam name="TPage">The type of the page.</typeparam>
            <param name="viewMappingKey">The view mapping key.</param>
            <param name="baseUri">The base URI.</param>
            <returns></returns>
        </member>
        <member name="T:MVVMSidekick.Views.ViewModelToViewMapperHelper">
            <summary>
            		 class ViewModelToViewMapperHelper
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapperHelper.GetDefaultViewModel(MVVMSidekick.Views.IView)">
            <summary>
            Gets the default view model.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapperHelper.GetViewMapper``1(MVVMSidekick.Services.ServiceLocatorEntryStruct{``0})">
            <summary>
            Gets the view mapper.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="vmRegisterEntry">The vm register entry.</param>
            <returns></returns>
        </member>
        <member name="T:MVVMSidekick.Views.ViewModelToViewMapperServiceLocator`1">
            <summary>
            View model to view service locator
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="M:MVVMSidekick.Views.ViewModelToViewMapperServiceLocator`1.#cctor">
            <summary>
            Constuctor
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.ViewModelToViewMapperServiceLocator`1.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:MVVMSidekick.Views.ViewModelLocator`1">
            <summary>
            Locator of view model class
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="P:MVVMSidekick.Views.ViewModelLocator`1.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:MVVMSidekick.Views.Stage">
            <summary>
            Stage class
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.Stage.#ctor(System.Windows.FrameworkElement,System.String,MVVMSidekick.Views.StageManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.Stage"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="beaconKey">The beacon key.</param>
            <param name="stageManager">The stageManager.</param>
        </member>
        <member name="F:MVVMSidekick.Views.Stage.FrameProperty">
            <summary>
            The frame property
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.Stage.BeaconKeyProperty">
            <summary>
            The beacon key property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.Stage.GetNavigateRequestContexts(System.Windows.DependencyObject)">
            <summary>
            Gets the navigate request contexts.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.Stage.SetNavigateRequestContexts(System.Windows.DependencyObject,System.Collections.Generic.Dictionary{System.String,MVVMSidekick.ViewModels.IViewModel})">
            <summary>
            Sets the navigate request contexts.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:MVVMSidekick.Views.Stage.NavigateRequestContextsProperty">
            <summary>
            The navigate request contexts property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.Stage.Show``1(``0,System.String)">
            <summary>
            Shows the specified target view model.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="targetViewModel">The target view model.</param>
            <param name="viewMappingKey">The view mapping key.</param>
            <returns></returns>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.Frame">
            <summary>
            Gets the frame.
            </summary>
            <value>
            The frame.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.IsGoForwardSupported">
            <summary>
            Is go forward supported
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.CanGoForward">
            <summary>
            Can go forward
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.IsGoBackSupported">
            <summary>
            Gets a value indicating whether this instance is go back supported.
            </summary>
            <value>
            <c>true</c> if this instance is go back supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.CanGoBack">
            <summary>
            Gets a value indicating whether this instance can go back.
            </summary>
            <value>
            <c>true</c> if this instance can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.Stage.BeaconKey">
            <summary>
            Gets the beacon key.
            </summary>
            <value>
            The beacon key.
            </value>
        </member>
        <member name="T:MVVMSidekick.Views.StageManager">
            <summary>
            The abstract  for frame/contentcontrol. VM can access this class to Show other vm and vm's mapped view.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.StageManager.#ctor(MVVMSidekick.ViewModels.IViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.StageManager"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="F:MVVMSidekick.Views.StageManager.NavigatorBeaconsKey">
            <summary>
            This Key is a prefix for register keys. 
            The stage registeration store the String-Element-Mapping in view's Resource Dictionary(Resource property). 
            This can help not to overwrite the resources already defined.
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.StageManager.InitParent(System.Func{System.Windows.DependencyObject})">
            <summary>
            Initializes the parent.
            </summary>
            <param name="parentLocator">The parent locator.</param>
        </member>
        <member name="M:MVVMSidekick.Views.StageManager.GetBeacon(System.Windows.DependencyObject)">
            <summary>
            Gets the beacon.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:MVVMSidekick.Views.StageManager.SetBeacon(System.Windows.DependencyObject,System.String)">
            <summary>Sets the beacon.</summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:MVVMSidekick.Views.StageManager.BeaconProperty">
            <summary>
            The beacon property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.StageManager.RegisterTargetBeacon(System.String,System.Windows.FrameworkElement)">
            <summary>
            Registers the target beacon.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
        </member>
        <member name="F:MVVMSidekick.Views.StageManager.DefaultTargetProperty">
            <summary>
            The default target property
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.StageManager.CurrentBindingView">
            <summary>
            Get the currently binded view of this stagemanager. A stagemanager is for a certain view. If viewmodel is not binded to a view, the whole thing cannot work.
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.StageManager.DefaultStage">
            <summary>
            Gets or sets the default stage.
            </summary>
            <value>
            The default stage.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.StageManager.Item(System.String)">
            <summary>
            Gets the <see cref="T:MVVMSidekick.Views.Stage"/> with the specified beacon key.
            </summary>
            <value>
            The <see cref="T:MVVMSidekick.Views.Stage"/>.
            </value>
            <param name="beaconKey">The beacon key.</param>
            <returns></returns>
        </member>
        <member name="T:MVVMSidekick.Views.PropertyBridge">
            <summary>
             A bridge binds two Dependency property
            </summary>
        </member>
        <member name="M:MVVMSidekick.Views.PropertyBridge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.Views.PropertyBridge"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.PropertyBridge.SourceProperty">
            <summary>
            The source property
            </summary>
        </member>
        <member name="F:MVVMSidekick.Views.PropertyBridge.TargetProperty">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:MVVMSidekick.Views.PropertyBridge.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MVVMSidekick.Views.PropertyBridge.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:MVVMSidekick.VisualStates.VisualStateProxyBinder">
            <summary>
            Class VisualStateProxyBinder.
            </summary>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxyBinder.Create(MVVMSidekick.VisualStates.VisualStateProxy)">
            <summary>
            Creates the specified proxy.
            </summary>
            <param name="proxy">The proxy.</param>
            <returns>VisualStateProxyBinder.</returns>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxyBinder.#ctor(MVVMSidekick.VisualStates.VisualStateProxy,System.Action{MVVMSidekick.VisualStates.VisualStateProxyBinder},System.Action{MVVMSidekick.VisualStates.VisualStateProxyBinder})">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.VisualStates.VisualStateProxyBinder"/> class.
            </summary>
            <param name="Proxy">The proxy.</param>
            <param name="binding">The binding.</param>
            <param name="dispose">The dispose.</param>
        </member>
        <member name="F:MVVMSidekick.VisualStates.VisualStateProxyBinder._Proxy">
            <summary>
            The _ proxy
            </summary>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxyBinder.GetBinder(System.Windows.DependencyObject)">
            <summary>
            Gets the binder.
            </summary>
            <param name="obj">The object.</param>
            <returns>VisualStateProxyBinder.</returns>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxyBinder.SetBinder(System.Windows.DependencyObject,MVVMSidekick.VisualStates.VisualStateProxyBinder)">
            <summary>
            Sets the binder.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:MVVMSidekick.VisualStates.VisualStateProxyBinder.BinderProperty">
            <summary>
            The binder property
            </summary>
        </member>
        <member name="T:MVVMSidekick.VisualStates.VisualStateProxy">
            <summary>
            Class VisualStateProxy.
            </summary>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMSidekick.VisualStates.VisualStateProxy"/> class.
            </summary>
        </member>
        <member name="F:MVVMSidekick.VisualStates.VisualStateProxy.BinderProperty">
            <summary>
            The binder property
            </summary>
        </member>
        <member name="F:MVVMSidekick.VisualStates.VisualStateProxy.CurrentStateProperty">
            <summary>
            The current state property
            </summary>
        </member>
        <member name="F:MVVMSidekick.VisualStates.VisualStateProxy.CurrentUseTransitionsProperty">
            <summary>
            The current use transitions property
            </summary>
        </member>
        <member name="M:MVVMSidekick.VisualStates.VisualStateProxy.GotoState(System.String,System.Boolean)">
            <summary>
            Gotoes the state.
            </summary>
            <param name="stateName">Name of the state.</param>
            <param name="useTransitions">if set to <c>true</c> [use transitions].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:MVVMSidekick.VisualStates.VisualStateProxy.Binder">
            <summary>
            Gets or sets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:MVVMSidekick.VisualStates.VisualStateProxy.CurrentState">
            <summary>
            Gets the state of the current.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="P:MVVMSidekick.VisualStates.VisualStateProxy.CurrentUseTransitions">
            <summary>
            Gets or sets a value indicating whether [current use transitions].
            </summary>
            <value><c>true</c> if [current use transitions]; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
